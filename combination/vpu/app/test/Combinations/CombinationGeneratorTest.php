<?php

require_once '../../../CombinationGenerator.php';
require_once '../../../CombinationStatistics.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-10-31 at 01:27:14.
 */
class CombinationGeneratorTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var CombinationGenerator
     */
    protected $combGen;
    protected $rule_1a1_ranges;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp()
    {
        /*$megaSc = mLoadXml( '../../../../d_megasc.htm');
        //d($megaSc);
        $megaSc = $megaSc->body->table->xpath('tr');
        array_shift($megaSc);

        $winningNumbers = array();
        foreach($megaSc as $k=>$combination) {
            $d = array();
            //d($combination);
            //d($c);
            //$c->date = (string)$combination->td[1];
            $d[] = (string)$combination->td[2];
            $d[] = (string)$combination->td[3];
            $d[] = (string)$combination->td[4];
            $d[] = (string)$combination->td[5];
            $d[] = (string)$combination->td[6];
            $d[] = (string)$combination->td[7];
            $c = new CombinationStatistics($d);
            $winningNumbers[] = $c;
            unset($c);
        }
        //d($winningNumbers);
        $this->combGen = new CombinationGenerator($winningNumbers);*/
        $this->combGen = new CombinationGenerator();
        $this->rule_1a1_ranges = array(
                    array('min'=>1,'max'=>30),
                    array('min'=>2,'max'=>40),
                    array('min'=>4,'max'=>49),
                    array('min'=>11,'max'=>55),
                    array('min'=>18,'max'=>59),
                    array('min'=>31,'max'=>60)
                );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    public function tearDown()
    {

    }


    /**
     * @covers CombinationGenerator::rule_1a1
     * @todo   Implement testRule_1a1().
     */
    public function testRule_1a1_generation()
    {
        $list = array();
        $ranges = $this->rule_1a1_ranges;
        // Remove the following lines when you implement this test.
        $c = $this->combGen->rule_1a1(array(), true);
        //print_r($c->d);
        //print_r($c);
        $this->assertEquals(FALSE, empty($c->d), 'Ensure the Combination is not empty after generation');
        foreach ($c->d as $key => $value) {
            $list[] = $value->n;
        }
        foreach ($c->d as $k => $Num) {
            $t = $Num->n;
            $this->assertTrue((($ranges[$k]['min']<=$t)&&($ranges[$k]['max']>=$t)), 'Check if all value are inside their proper ranges');
        }
    }

    /**
     * @covers CombinationGenerator::rule_1a1
     */
    public function testRule_1a1_generate_from_seed()
    {
        $list = array();
        $ranges = $this->rule_1a1_ranges;
        // Remove the following lines when you implement this test.
        $C = new CombinationStatistics('123742434448');
        $c = $this->combGen->rule_1a1($C, true);
        $this->assertEquals(FALSE, empty($c->d), 'Ensure the Combination is not empty after generation');
        foreach ($c->d as $key => $value) {
            $list[] = $value->n;
        }
        foreach ($c->d as $k => $Num) {
            $t = $Num->n;
            $this->assertTrue((($ranges[$k]['min']<=$t)&&($ranges[$k]['max']>=$t)), 'Check if all value are inside their proper ranges');
        }
    }

    /**
     * @covers CombinationGenerator::rule_1a1
     * @todo   Implement testRule_1a1().
     */
    public function testRule_1a1_checking()
    {        
        $C = new CombinationStatistics('123742434448');
        $ranges = $this->rule_1a1_ranges;
        $r = $this->combGen->rule_1a1($C);
        $this->assertEquals(true, $r, 'Did the check pass (true)');

        $C = new CombinationStatistics('013703430248');
        $ranges = $this->rule_1a1_ranges;
        $r = $this->combGen->rule_1a1($C);
        $this->assertEquals(false, $r, 'Did the check pass (true)');
    }

    /**
     * @covers CombinationGenerator::rule_1a2
     * @todo   Implement testRule_1a2().
     */
    public function testRule_1a2()
    {
        $C1 = new CombinationStatistics('123642464448');
        $C2 = new CombinationStatistics('113741434559');
        // Remove the following lines when you implement this test.
        $this->assertTrue(!$this->combGen->rule_1a2($C1), 'Does it reject all even N');
        $this->assertTrue(!$this->combGen->rule_1a2($C2), 'Does it reject all odd N');
    }

    /**
     * @covers CombinationGenerator::rule_1a3
     * @todo   Implement testRule_1a3().
     */
    public function testRule_1a3()
    {
        $C1 = new CombinationStatistics('273642464448');
        $C2 = new CombinationStatistics('113741434559');
        // Remove the following lines when you implement this test.
        $this->assertTrue(!$this->combGen->rule_1a3($C1), 'Does it prevent 6N from being in 3 tens groups (false)');
        $this->assertTrue(!$this->combGen->rule_1a3($C2), 'Does it prevent 6N from being in 3 tens groups (true)');
    }

    /**
     * @covers CombinationGenerator::rule_1a4
     * @todo   Implement testRule_1a4().
     */
    public function testRule_1a4()
    {
        $C1 = new CombinationStatistics('011122334454');
        $C2 = new CombinationStatistics('113741434559');
        // Remove the following lines when you implement this test.
        $this->assertTrue(!$this->combGen->rule_1a4($C1), 'Does it prevent all DF consecutive from being in 3 tens groups (false)');
        $this->assertTrue($this->combGen->rule_1a4($C2), 'Does it prevent all DF consecutive from being in 3 tens groups (true)');
    }

    /**
     * @covers CombinationGenerator::rule_1a5
     * @todo   Implement testRule_1a5().
     */
    public function testRule_1a5()
    {
        $C1 = new CombinationStatistics('011122334352');
        $C2 = new CombinationStatistics('193746474859');
        $C3 = new CombinationStatistics('113741434559');
        // Remove the following lines when you implement this test.
        $this->assertTrue(!$this->combGen->rule_1a5($C1), 'Does it prevent all DF from being in less than or equal 4 (false)');
        $this->assertTrue(!$this->combGen->rule_1a5($C2), 'Does it prevent all DF from being in greater than  or equal 5 (false)');
        $this->assertTrue($this->combGen->rule_1a5($C3), 'Does it allow DF to be less than and greater than 4/5 (true)');
    }

    /**
     * @covers CombinationGenerator::rule_1a6
     * @todo   Implement testRule_1a6().
     */
    public function testRule_1a6()
    {
        $C1 = new CombinationStatistics('010222234454');
        $C2 = new CombinationStatistics('010223234454');
        // Remove the following lines when you implement this test.
        $this->assertTrue(!$this->combGen->rule_1a6($C1), 'Does it prevent 2 pairs consecutive from occuring (false)');
        $this->assertTrue($this->combGen->rule_1a6($C2), 'Does it prevent 2 pairs consecutive from occuring (true)');
    }

    /**
     * @covers CombinationGenerator::rule_1a7
     * @todo   Implement testRule_1a7().
     */
    public function testRule_1a7()
    {
        $C1 = new CombinationStatistics('010407234447');
        $C2 = new CombinationStatistics('010223234454');
        // Remove the following lines when you implement this test.
        $this->assertTrue(!$this->combGen->rule_1a7($C1), 'Does it prevent 3NDif != 6 (false)');
        $this->assertTrue($this->combGen->rule_1a7($C2), 'Does it prevent 3NDif != 6 (true)');
    }

    /**
     * @covers CombinationGenerator::rule_1a8
     * @todo   Implement testRule_1a8().
     */
    public function testRule_1a8()
    {        
        $C1 = new CombinationStatistics('010421234347');
        $C2 = new CombinationStatistics('010223234454');
        //print_r($C1);
        //print_r('"'.$C2->cRd_cRf.'"');
        // Remove the following lines when you implement this test.
        $this->assertTrue(!$this->combGen->rule_1a8($C1), 'Does it prevent 3NDif != 6 (222-2211:false)');
        $this->assertTrue($this->combGen->rule_1a8($C2), 'Does it prevent 3NDif != 6 (true)');
    }

    /**
     * @covers CombinationGenerator::numElementsEqual
     * @todo   Implement testNumElementsEqual().
     */
    public function testNumElementsEqual()
    {        
        $C1 = new CombinationStatistics('010421234347');
        $C2 = new CombinationStatistics('010421234347');
        $C3 = new CombinationStatistics('010522234347');
        //print_r($C1);
        //print_r('"'.$C2->cRd_cRf.'"');
        // Remove the following lines when you implement this test.
        print_r($this->combGen->numElementsEqual($C1, $C2));
        print_r($this->combGen->numElementsEqual($C1, $C3));
        $this->assertEquals(6, $this->combGen->numElementsEqual($C1, $C2), 'Counts then number of matching N in two Combinations (value:6)');
        $this->assertEquals(4, $this->combGen->numElementsEqual($C1, $C3), 'Counts then number of matching N in two Combinations (value:4)');
    }

    /**
     * @covers CombinationGenerator::rule_matchingNumberThreshold
     * @todo   Implement testRule_matchingNumberThreshold().
     */
    public function testRule_matchingNumberThreshold()
    {
        $C1 = new CombinationStatistics('010421234347');
        $this->assertTrue(!rule_matchingNumberThreshold($c1, $this->combGen->wCombs), 'message');
    }

    /**
     * @covers CombinationGenerator::rule_1b2
     * @todo   Implement testRule_1b2().
     */
    public function testRule_1b2()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers CombinationGenerator::rule_1b3
     * @todo   Implement testRule_1b3().
     */
    public function testRule_1b3()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers CombinationGenerator::generate2_1cLimit
     * @todo   Implement testGenerate2_1cLimit().
     */
    public function testGenerate2_1cLimit()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers CombinationGenerator::rule_2_1c
     * @todo   Implement testRule_2_1c().
     */
    public function testRule_2_1c()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers CombinationGenerator::check_rule_2_2_1a
     * @todo   Implement testCheck_rule_2_2_1a().
     */
    public function testCheck_rule_2_2_1a()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers CombinationGenerator::rule_2_2_1a
     * @todo   Implement testRule_2_2_1a().
     */
    public function testRule_2_2_1a()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers CombinationGenerator::rule_2_2_1b
     * @todo   Implement testRule_2_2_1b().
     */
    public function testRule_2_2_1b()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers CombinationGenerator::rule_2_2_1c
     * @todo   Implement testRule_2_2_1c().
     */
    public function testRule_2_2_1c()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers CombinationGenerator::rule_2_2_1d
     * @todo   Implement testRule_2_2_1d().
     */
    public function testRule_2_2_1d()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
