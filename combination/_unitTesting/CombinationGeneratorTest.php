<?php

require_once ABSPATH.'simpletest/autorun.php';
require_once ABSPATH.'CombinationGenerator.php';
require_once ABSPATH.'CombinationStatistics.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-10-31 at 01:27:14.
 */
class CombinationGeneratorTest extends UnitTestCase
{
    /**
     * @var CombinationGenerator
     */
    protected $combGen;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp()
    {
        /*$megaSc = mLoadXml( TESTPATH.'d_megasc.htm');
        //d($megaSc);
        $megaSc = $megaSc->body->table->xpath('tr');
        array_shift($megaSc);

        $winningNumbers = array();
        foreach($megaSc as $k=>$combination) {
            $d = array();
            //d($combination);
            //d($c);
            //$c->date = (string)$combination->td[1];
            $d[] = (string)$combination->td[2];
            $d[] = (string)$combination->td[3];
            $d[] = (string)$combination->td[4];
            $d[] = (string)$combination->td[5];
            $d[] = (string)$combination->td[6];
            $d[] = (string)$combination->td[7];
            $c = new CombinationStatistics($d);
            $winningNumbers[] = $c;
            unset($c);
        }
        //d($winningNumbers);
        $this->combGen = new CombinationGenerator($winningNumbers);*/
        $this->combGen = new CombinationGenerator();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    public function tearDown()
    {
    }

    /**
     * @covers CombinationGenerator::rule_1a1
     * @todo   Implement testRule_1a1().
     */
    public function testRule_1a1()
    {
        // Remove the following lines when you implement this test.
        $c = $this->combGen->rule_1a1();;
        d($c);
        $this->assertTrue(FALSE);
    }

    /**
     * @covers CombinationGenerator::rule_1a2
     * @todo   Implement testRule_1a2().
     */
    public function testRule_1a2()
    {
        // Remove the following lines when you implement this test.
        $this->assertTrue(FALSE);
    }

    /**
     * @covers CombinationGenerator::rule_1a3
     * @todo   Implement testRule_1a3().
     */
    public function testRule_1a3()
    {
        // Remove the following lines when you implement this test.
        $this->assertTrue(FALSE);
    }

    /**
     * @covers CombinationGenerator::rule_1a4
     * @todo   Implement testRule_1a4().
     */
    public function testRule_1a4()
    {
        // Remove the following lines when you implement this test.
        $this->assertTrue(FALSE);
    }

    /**
     * @covers CombinationGenerator::rule_1a5
     * @todo   Implement testRule_1a5().
     */
    public function testRule_1a5()
    {
        // Remove the following lines when you implement this test.
        $this->assertTrue(FALSE);
    }

    /**
     * @covers CombinationGenerator::rule_1a6
     * @todo   Implement testRule_1a6().
     */
    public function testRule_1a6()
    {
        // Remove the following lines when you implement this test.
        $this->assertTrue(FALSE);
    }

    /**
     * @covers CombinationGenerator::rule_1a7
     * @todo   Implement testRule_1a7().
     */
    public function testRule_1a7()
    {
        // Remove the following lines when you implement this test.
        $this->assertTrue(FALSE);
    }

    /**
     * @covers CombinationGenerator::rule_1a8
     * @todo   Implement testRule_1a8().
     */
    public function testRule_1a8()
    {
        // Remove the following lines when you implement this test.
        $this->assertTrue(FALSE);
    }

    /**
     * @covers CombinationGenerator::numElementsEqual
     * @todo   Implement testNumElementsEqual().
     */
    public function testNumElementsEqual()
    {
        // Remove the following lines when you implement this test.
        $this->assertTrue(FALSE);
    }

    /**
     * @covers CombinationGenerator::rule_matchingNumberThreshold
     * @todo   Implement testRule_matchingNumberThreshold().
     */
    public function testRule_matchingNumberThreshold()
    {
        // Remove the following lines when you implement this test.
        $this->assertTrue(FALSE);
    }

    /**
     * @covers CombinationGenerator::rule_1b2
     * @todo   Implement testRule_1b2().
     */
    public function testRule_1b2()
    {
        // Remove the following lines when you implement this test.
        $this->assertTrue(FALSE);
    }

    /**
     * @covers CombinationGenerator::rule_1b3
     * @todo   Implement testRule_1b3().
     */
    public function testRule_1b3()
    {
        // Remove the following lines when you implement this test.
        $this->assertTrue(FALSE);
    }

    /**
     * @covers CombinationGenerator::generate2_1cLimit
     * @todo   Implement testGenerate2_1cLimit().
     */
    public function testGenerate2_1cLimit()
    {
        // Remove the following lines when you implement this test.
        $this->assertTrue(FALSE);
    }

    /**
     * @covers CombinationGenerator::rule_2_1c
     * @todo   Implement testRule_2_1c().
     */
    public function testRule_2_1c()
    {
        // Remove the following lines when you implement this test.
        $this->assertTrue(FALSE);
    }

    /**
     * @covers CombinationGenerator::check_rule_2_2_1a
     * @todo   Implement testCheck_rule_2_2_1a().
     */
    public function testCheck_rule_2_2_1a()
    {
        // Remove the following lines when you implement this test.
        $this->assertTrue(FALSE);
    }

    /**
     * @covers CombinationGenerator::rule_2_2_1a
     * @todo   Implement testRule_2_2_1a().
     */
    public function testRule_2_2_1a()
    {
        // Remove the following lines when you implement this test.
        $this->assertTrue(FALSE);
    }

    /**
     * @covers CombinationGenerator::rule_2_2_1b
     * @todo   Implement testRule_2_2_1b().
     */
    public function testRule_2_2_1b()
    {
        // Remove the following lines when you implement this test.
        $this->assertTrue(FALSE);
    }

    /**
     * @covers CombinationGenerator::rule_2_2_1c
     * @todo   Implement testRule_2_2_1c().
     */
    public function testRule_2_2_1c()
    {
        // Remove the following lines when you implement this test.
        $this->assertTrue(FALSE);
    }

    /**
     * @covers CombinationGenerator::rule_2_2_1d
     * @todo   Implement testRule_2_2_1d().
     */
    public function testRule_2_2_1d()
    {
        // Remove the following lines when you implement this test.
        $this->assertTrue(FALSE);
    }
}
